{
  "name": "short-memory",
  "version": "0.1.2",
  "description": "Simple node.js in-memory caching library.",
  "keywords": [
    "cache",
    "memory"
  ],
  "author": {
    "name": "Aejay Goehring",
    "email": "aejay.goehring@gmail.com"
  },
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "",
    "mocha": "",
    "uglify-js2": "",
    "should": "",
    "wrench": ""
  },
  "main": "index",
  "engines": {
    "node": ">= 0.5.0"
  },
  "scripts": {},
  "readme": "short-memory\n============\n\nSimple node.js in-memory caching library.\n\nCreates basic structures for storing arbitrary data for future use, able to be\nlimited by entry count, entry age, or cache size.\n\n## Installation\n\n    $ npm install short-memory\n\n## Simple usage\n```js\nvar ShortMemory = require('short-memory');\n\nvar options = {};\n\nvar cache = new ShortMemory(options);\n\n// Set and get can be called async or sync by providing or excluding \n// a callback function. Sync requests return the result directly to \n// the calling expression.\ncache.set(\"First!\", {important: \"data\"});\n\n// async requests have the result passed to the given function.\ncache.get(\"First!\", function(err, result) {\n  // Logs: {important: \"data\"}\n  console.log(err || result);\n});\n```\n\n## Options\n\nShortMemory can be initialized with several options, which you can use to limit \nthe size and alter the behavior of the cache:\n```js\nvar options = {\n  // How long, in seconds, it takes for an entry to expire and become\n  // prunable. Defaults to 0, which does not set expirations for \n  // entries. This can be over-ridden by the options passed when \n  // setting a cache entry.\n  maxAge: 60,\n  \n  // How large the (estimated*) size of the cache can be before \n  // pruning old entries. Defaults to 0, which does not set a \n  // maximum size.\n  maxSize: 5000,\n  // * Size estimations are best-guess. This method should be \n  // last resort, perhaps used as a fail-safe against enormous \n  // data retention.\n  \n  // How many entries the cache can hold before pruning the \n  // oldest entries. Defaults to 0, which allows any number of \n  // entries.\n  maxCount: 100,\n  \n  // How often the system checks for and destroys obsolete \n  // entries, in seconds. Defaults to 5.\n  pruneTime: 5,\n  \n  \n  // When an entry is this many seconds from expiring, the \n  // system should return the current value on request and kick \n  // off a process to update the value afterwards. This is used \n  // by the getOrSet function. This can be over-ridden by the \n  // options passed when setting a cache entry.\n  deathTime: 0,\n  \n  // Writes verbose output to the console for debugging.\n  debug: false\n  \n};\nvar cache = new ShortMemory(options);\n```\n\n## Functions\n\n```js\n// Let's start with the following assumption:\nvar ShortMemory = require(\"short-memory\");\nvar cache = new ShortMemory({maxCount: 10});\n```\n\n### .set(key, value [, options] [, callback])\n\nSets the key to the given value. When successful, it responds with the\nvalue of the given entry's value. This function can be called asynchronously\nby providing a callback function, which receives data in the expected\n`(err, data)` format.\n\nWhen called synchronously, the value of the key is returned to the calling \nexpression when successful; when unsuccessful, it returns `null`.\n\n```js\ncache.set(\"name\", \"Andrew\");\n\ncache.set(\"food\", \"Pizza\", function(err, data) {\n  if (err) throw err;\n  else console.log(data);\n});\n\ncache.set(\"animal\", \"Panda\", {maxAge: 120, deathTime: 30}, function(err, result) {\n  // maxAge and deathTime can be over-ridden on an entry basis\n});\n```\n\n### .get(key [, callback])\n\nRetrieves the value for the given key. This responds just as .set does.If\nasync, it calls back with `(err, data)`. If sync, it either returns the value\nof the key, or `null`.\n\n```js\n// \"Andrew\"\nconsole.log(cache.get(\"name\"));\n\ncache.get(\"food\", function(err, data) {\n  if (err) throw err;\n  // \"Pizza\"\n  else console.log(data);\n});\n\n// \"Panda\"\ncache.get(\"animal\", console.log.bind(console));\n```\n\n### .getOrSet(key, setback [, options] [, callback])\n\nThis is what you will most likely use, but I thought I'd explain those other\ntwo first.\n\nRetrieves the value of the given key. If the key has expired or does not exist,\nit calls setback, which it expects to return the new value. It then updates the\nvalue, and returns the new value.\n\nA callback can be specified to run asynchronously. Additionally, if the `async`\noption is set to `true`, the setback will be called with next function that \nwraps the key update and given callback function. See the third example.\n\nAdditionally, if the key has a `deathTime` of anything other than 0, cache entries\nget treated differently by this function. If an entry is requested that is within\nits `deathTime` (given seconds away from its expiration), the function will return\nor callback with the current value immediately, and then follow up with an update\nafter-the-fact. (Instant gratification, deferred update, all goodness.)\n\n```js\n// Since \"name\" exists and is valid, Andrew is returned\nvar myName = cache.getOrSet(\n  \"name\",\n  // If it didn't, it would update and return \"Aejay\"\n  function() {\n    return \"Aejay\";\n  }\n);\n\nvar myFood;\ncache.getOrSet(\n  \"food\",\n  // If \"food\" didn't exist, we would use our own LookupFunction to\n  // figure out the value, which would then be stored and the\n  // callback would set myFood to the new value.\n  function(key) {\n    return LookupFunction(key);\n  },\n  // Since \"food\" exists, though, myFood gets set to \"Pizza\"\n  function(err, data) {\n    myFood = data;\n  }\n);\n\n// Pandas are not practical pets.\nvar myAnimal;\ncache.getOrSet(\n  \"animal\",\n  // The \"next\" function is provided to us when we specify the async\n  // option.\n  function(key, next) {\n    // If we have an async version of our LookupFunction, we can use\n    // it here...\n    LookupFunctionAsync(key, function(data) {\n      // ... and assign its response to the value by calling the \n      // given next() function\n      next(data);\n      // next sets the key to the given value, and then fires the \n      // callback parameter.\n    });\n  },\n  {async:true},\n  // Ultimately, our callback gets called. Since \"animal\" does exist,\n  // myAnimal gets set to \"Panda\".\n  function(err, data) {\n    myAnimal = data;\n  }\n);\n// Seriously, though, kids. Leave the care of endangered species \n// to the professionals!\n```\n\n### .destroy(key [, callback])\n\nDoes what it sounds like. You can use this function to manually discard an\nentry in your cache. Will respond with `true` if it succeeded, or `false` if\nthe key did not exist or could not (for whatever odd reason) be deleted.\n\n```js\n// true\ncache.destroy(\"food\");\n// null\ncache.get(\"food\");\n\n// false (it doesn't exist)\ncache.destroy(\"Planet Pluto\");\n// still null\ncache.get(\"Planet Pluto\");\n\n// Sorry if that destroys your childhood like it did mine.\n```\n\n### .isHealthy(key)\n\nThis function is only useful if a key has an expiration (`maxAge`) and a\n`deathTime`. It can be used to determine if a key is healthy (ie: it is not\nexpired, and is not within `deathTime` seconds from expiring). If it is not\nhealthy, the application may choose to manually update the entry, or take\nwhatever other needed course of action.\n\n```js\n// false (We destroyed it, remember? Destruction isn't healthy.)\ncache.isHealthy(\"food\");\n\n// true\ncache.isHealthy(\"animal\");\n```\n\n## Building\n\nIf you'd like to compile the coffeescript to javascript yourself, simply use\ncake:\n\n```\n$ cake\nCakefile defines the following tasks:\n\ncake build    # build the short-memory library from source\ncake watch    # watch the source files for changes, and build\n\n  -m, --minify       define whether to also minify build or watch\n  -t, --test         run and output tests/coverage to test directory\n\n$ cake build\nCompiling: src\\short-memory.coffee\n```\n\n## Credits\n\nThis library was inspired by [memcached](http://memcached.org/) (in spirit, \nbut not in source).\n\n## License\n\n&copy;2012 Aejay Goehring and available under the MIT license:\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, \nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "short-memory@0.1.2",
  "dist": {
    "shasum": "ad2b1393ca4fe2902bc29bb999723a855ef7242c",
    "tarball": "http://registry.npmjs.org/short-memory/-/short-memory-0.1.2.tgz"
  },
  "_npmVersion": "1.1.62",
  "_npmUser": {
    "name": "aejay",
    "email": "aejay.goehring@gmail.com"
  },
  "maintainers": [
    {
      "name": "aejay",
      "email": "aejay.goehring@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "ad2b1393ca4fe2902bc29bb999723a855ef7242c",
  "_from": "short-memory@",
  "_resolved": "https://registry.npmjs.org/short-memory/-/short-memory-0.1.2.tgz"
}
