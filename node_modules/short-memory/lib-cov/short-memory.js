/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['short-memory.js']) {
  _$jscoverage['short-memory.js'] = [];
  _$jscoverage['short-memory.js'][6] = 0;
  _$jscoverage['short-memory.js'][7] = 0;
  _$jscoverage['short-memory.js'][9] = 0;
  _$jscoverage['short-memory.js'][11] = 0;
  _$jscoverage['short-memory.js'][12] = 0;
  _$jscoverage['short-memory.js'][14] = 0;
  _$jscoverage['short-memory.js'][16] = 0;
  _$jscoverage['short-memory.js'][18] = 0;
  _$jscoverage['short-memory.js'][20] = 0;
  _$jscoverage['short-memory.js'][22] = 0;
  _$jscoverage['short-memory.js'][24] = 0;
  _$jscoverage['short-memory.js'][26] = 0;
  _$jscoverage['short-memory.js'][28] = 0;
  _$jscoverage['short-memory.js'][30] = 0;
  _$jscoverage['short-memory.js'][32] = 0;
  _$jscoverage['short-memory.js'][33] = 0;
  _$jscoverage['short-memory.js'][34] = 0;
  _$jscoverage['short-memory.js'][35] = 0;
  _$jscoverage['short-memory.js'][36] = 0;
  _$jscoverage['short-memory.js'][38] = 0;
  _$jscoverage['short-memory.js'][39] = 0;
  _$jscoverage['short-memory.js'][41] = 0;
  _$jscoverage['short-memory.js'][42] = 0;
  _$jscoverage['short-memory.js'][44] = 0;
  _$jscoverage['short-memory.js'][45] = 0;
  _$jscoverage['short-memory.js'][47] = 0;
  _$jscoverage['short-memory.js'][48] = 0;
  _$jscoverage['short-memory.js'][50] = 0;
  _$jscoverage['short-memory.js'][51] = 0;
  _$jscoverage['short-memory.js'][53] = 0;
  _$jscoverage['short-memory.js'][54] = 0;
  _$jscoverage['short-memory.js'][56] = 0;
  _$jscoverage['short-memory.js'][57] = 0;
  _$jscoverage['short-memory.js'][58] = 0;
  _$jscoverage['short-memory.js'][59] = 0;
  _$jscoverage['short-memory.js'][60] = 0;
  _$jscoverage['short-memory.js'][61] = 0;
  _$jscoverage['short-memory.js'][62] = 0;
  _$jscoverage['short-memory.js'][63] = 0;
  _$jscoverage['short-memory.js'][65] = 0;
  _$jscoverage['short-memory.js'][66] = 0;
  _$jscoverage['short-memory.js'][70] = 0;
  _$jscoverage['short-memory.js'][71] = 0;
  _$jscoverage['short-memory.js'][72] = 0;
  _$jscoverage['short-memory.js'][73] = 0;
  _$jscoverage['short-memory.js'][75] = 0;
  _$jscoverage['short-memory.js'][76] = 0;
  _$jscoverage['short-memory.js'][77] = 0;
  _$jscoverage['short-memory.js'][78] = 0;
  _$jscoverage['short-memory.js'][79] = 0;
  _$jscoverage['short-memory.js'][80] = 0;
  _$jscoverage['short-memory.js'][82] = 0;
  _$jscoverage['short-memory.js'][84] = 0;
  _$jscoverage['short-memory.js'][85] = 0;
  _$jscoverage['short-memory.js'][89] = 0;
  _$jscoverage['short-memory.js'][90] = 0;
  _$jscoverage['short-memory.js'][91] = 0;
  _$jscoverage['short-memory.js'][92] = 0;
  _$jscoverage['short-memory.js'][93] = 0;
  _$jscoverage['short-memory.js'][95] = 0;
  _$jscoverage['short-memory.js'][96] = 0;
  _$jscoverage['short-memory.js'][98] = 0;
  _$jscoverage['short-memory.js'][99] = 0;
  _$jscoverage['short-memory.js'][101] = 0;
  _$jscoverage['short-memory.js'][102] = 0;
  _$jscoverage['short-memory.js'][103] = 0;
  _$jscoverage['short-memory.js'][104] = 0;
  _$jscoverage['short-memory.js'][106] = 0;
  _$jscoverage['short-memory.js'][107] = 0;
  _$jscoverage['short-memory.js'][116] = 0;
  _$jscoverage['short-memory.js'][117] = 0;
  _$jscoverage['short-memory.js'][118] = 0;
  _$jscoverage['short-memory.js'][119] = 0;
  _$jscoverage['short-memory.js'][120] = 0;
  _$jscoverage['short-memory.js'][121] = 0;
  _$jscoverage['short-memory.js'][122] = 0;
  _$jscoverage['short-memory.js'][123] = 0;
  _$jscoverage['short-memory.js'][125] = 0;
  _$jscoverage['short-memory.js'][127] = 0;
  _$jscoverage['short-memory.js'][128] = 0;
  _$jscoverage['short-memory.js'][132] = 0;
  _$jscoverage['short-memory.js'][133] = 0;
  _$jscoverage['short-memory.js'][134] = 0;
  _$jscoverage['short-memory.js'][135] = 0;
  _$jscoverage['short-memory.js'][136] = 0;
  _$jscoverage['short-memory.js'][137] = 0;
  _$jscoverage['short-memory.js'][138] = 0;
  _$jscoverage['short-memory.js'][145] = 0;
  _$jscoverage['short-memory.js'][146] = 0;
  _$jscoverage['short-memory.js'][147] = 0;
  _$jscoverage['short-memory.js'][148] = 0;
  _$jscoverage['short-memory.js'][155] = 0;
  _$jscoverage['short-memory.js'][156] = 0;
  _$jscoverage['short-memory.js'][161] = 0;
  _$jscoverage['short-memory.js'][162] = 0;
  _$jscoverage['short-memory.js'][163] = 0;
  _$jscoverage['short-memory.js'][164] = 0;
  _$jscoverage['short-memory.js'][165] = 0;
  _$jscoverage['short-memory.js'][166] = 0;
  _$jscoverage['short-memory.js'][168] = 0;
  _$jscoverage['short-memory.js'][169] = 0;
  _$jscoverage['short-memory.js'][170] = 0;
  _$jscoverage['short-memory.js'][171] = 0;
  _$jscoverage['short-memory.js'][172] = 0;
  _$jscoverage['short-memory.js'][173] = 0;
  _$jscoverage['short-memory.js'][174] = 0;
  _$jscoverage['short-memory.js'][175] = 0;
  _$jscoverage['short-memory.js'][176] = 0;
  _$jscoverage['short-memory.js'][177] = 0;
  _$jscoverage['short-memory.js'][178] = 0;
  _$jscoverage['short-memory.js'][179] = 0;
  _$jscoverage['short-memory.js'][183] = 0;
  _$jscoverage['short-memory.js'][184] = 0;
  _$jscoverage['short-memory.js'][189] = 0;
  _$jscoverage['short-memory.js'][190] = 0;
  _$jscoverage['short-memory.js'][191] = 0;
  _$jscoverage['short-memory.js'][192] = 0;
  _$jscoverage['short-memory.js'][193] = 0;
  _$jscoverage['short-memory.js'][196] = 0;
  _$jscoverage['short-memory.js'][197] = 0;
  _$jscoverage['short-memory.js'][202] = 0;
  _$jscoverage['short-memory.js'][203] = 0;
  _$jscoverage['short-memory.js'][204] = 0;
  _$jscoverage['short-memory.js'][205] = 0;
  _$jscoverage['short-memory.js'][206] = 0;
  _$jscoverage['short-memory.js'][207] = 0;
  _$jscoverage['short-memory.js'][208] = 0;
  _$jscoverage['short-memory.js'][210] = 0;
  _$jscoverage['short-memory.js'][211] = 0;
  _$jscoverage['short-memory.js'][214] = 0;
  _$jscoverage['short-memory.js'][216] = 0;
  _$jscoverage['short-memory.js'][217] = 0;
  _$jscoverage['short-memory.js'][218] = 0;
  _$jscoverage['short-memory.js'][220] = 0;
  _$jscoverage['short-memory.js'][223] = 0;
  _$jscoverage['short-memory.js'][224] = 0;
  _$jscoverage['short-memory.js'][225] = 0;
  _$jscoverage['short-memory.js'][226] = 0;
  _$jscoverage['short-memory.js'][227] = 0;
  _$jscoverage['short-memory.js'][228] = 0;
  _$jscoverage['short-memory.js'][230] = 0;
  _$jscoverage['short-memory.js'][232] = 0;
  _$jscoverage['short-memory.js'][237] = 0;
  _$jscoverage['short-memory.js'][238] = 0;
  _$jscoverage['short-memory.js'][239] = 0;
  _$jscoverage['short-memory.js'][240] = 0;
  _$jscoverage['short-memory.js'][241] = 0;
  _$jscoverage['short-memory.js'][242] = 0;
  _$jscoverage['short-memory.js'][244] = 0;
  _$jscoverage['short-memory.js'][245] = 0;
  _$jscoverage['short-memory.js'][246] = 0;
  _$jscoverage['short-memory.js'][250] = 0;
  _$jscoverage['short-memory.js'][251] = 0;
  _$jscoverage['short-memory.js'][252] = 0;
  _$jscoverage['short-memory.js'][254] = 0;
  _$jscoverage['short-memory.js'][255] = 0;
  _$jscoverage['short-memory.js'][256] = 0;
  _$jscoverage['short-memory.js'][261] = 0;
  _$jscoverage['short-memory.js'][262] = 0;
  _$jscoverage['short-memory.js'][263] = 0;
  _$jscoverage['short-memory.js'][264] = 0;
  _$jscoverage['short-memory.js'][265] = 0;
  _$jscoverage['short-memory.js'][266] = 0;
  _$jscoverage['short-memory.js'][267] = 0;
  _$jscoverage['short-memory.js'][268] = 0;
  _$jscoverage['short-memory.js'][269] = 0;
  _$jscoverage['short-memory.js'][270] = 0;
  _$jscoverage['short-memory.js'][271] = 0;
  _$jscoverage['short-memory.js'][274] = 0;
  _$jscoverage['short-memory.js'][275] = 0;
  _$jscoverage['short-memory.js'][276] = 0;
  _$jscoverage['short-memory.js'][277] = 0;
  _$jscoverage['short-memory.js'][279] = 0;
  _$jscoverage['short-memory.js'][280] = 0;
  _$jscoverage['short-memory.js'][281] = 0;
  _$jscoverage['short-memory.js'][282] = 0;
  _$jscoverage['short-memory.js'][283] = 0;
  _$jscoverage['short-memory.js'][284] = 0;
  _$jscoverage['short-memory.js'][285] = 0;
  _$jscoverage['short-memory.js'][286] = 0;
  _$jscoverage['short-memory.js'][287] = 0;
  _$jscoverage['short-memory.js'][291] = 0;
  _$jscoverage['short-memory.js'][292] = 0;
  _$jscoverage['short-memory.js'][293] = 0;
  _$jscoverage['short-memory.js'][294] = 0;
  _$jscoverage['short-memory.js'][295] = 0;
  _$jscoverage['short-memory.js'][296] = 0;
  _$jscoverage['short-memory.js'][297] = 0;
  _$jscoverage['short-memory.js'][298] = 0;
  _$jscoverage['short-memory.js'][299] = 0;
  _$jscoverage['short-memory.js'][300] = 0;
  _$jscoverage['short-memory.js'][301] = 0;
  _$jscoverage['short-memory.js'][302] = 0;
  _$jscoverage['short-memory.js'][305] = 0;
  _$jscoverage['short-memory.js'][306] = 0;
  _$jscoverage['short-memory.js'][307] = 0;
  _$jscoverage['short-memory.js'][308] = 0;
  _$jscoverage['short-memory.js'][312] = 0;
  _$jscoverage['short-memory.js'][313] = 0;
  _$jscoverage['short-memory.js'][315] = 0;
  _$jscoverage['short-memory.js'][316] = 0;
  _$jscoverage['short-memory.js'][319] = 0;
  _$jscoverage['short-memory.js'][320] = 0;
  _$jscoverage['short-memory.js'][321] = 0;
  _$jscoverage['short-memory.js'][322] = 0;
  _$jscoverage['short-memory.js'][323] = 0;
  _$jscoverage['short-memory.js'][324] = 0;
  _$jscoverage['short-memory.js'][325] = 0;
  _$jscoverage['short-memory.js'][327] = 0;
  _$jscoverage['short-memory.js'][330] = 0;
  _$jscoverage['short-memory.js'][331] = 0;
  _$jscoverage['short-memory.js'][332] = 0;
  _$jscoverage['short-memory.js'][333] = 0;
  _$jscoverage['short-memory.js'][334] = 0;
  _$jscoverage['short-memory.js'][336] = 0;
  _$jscoverage['short-memory.js'][340] = 0;
  _$jscoverage['short-memory.js'][344] = 0;
  _$jscoverage['short-memory.js'][345] = 0;
  _$jscoverage['short-memory.js'][347] = 0;
  _$jscoverage['short-memory.js'][349] = 0;
  _$jscoverage['short-memory.js'][351] = 0;
  _$jscoverage['short-memory.js'][353] = 0;
  _$jscoverage['short-memory.js'][355] = 0;
  _$jscoverage['short-memory.js'][357] = 0;
  _$jscoverage['short-memory.js'][359] = 0;
  _$jscoverage['short-memory.js'][361] = 0;
  _$jscoverage['short-memory.js'][363] = 0;
  _$jscoverage['short-memory.js'][364] = 0;
  _$jscoverage['short-memory.js'][365] = 0;
  _$jscoverage['short-memory.js'][366] = 0;
  _$jscoverage['short-memory.js'][367] = 0;
  _$jscoverage['short-memory.js'][369] = 0;
  _$jscoverage['short-memory.js'][370] = 0;
  _$jscoverage['short-memory.js'][372] = 0;
  _$jscoverage['short-memory.js'][373] = 0;
  _$jscoverage['short-memory.js'][375] = 0;
  _$jscoverage['short-memory.js'][376] = 0;
  _$jscoverage['short-memory.js'][378] = 0;
  _$jscoverage['short-memory.js'][379] = 0;
  _$jscoverage['short-memory.js'][381] = 0;
  _$jscoverage['short-memory.js'][382] = 0;
  _$jscoverage['short-memory.js'][383] = 0;
  _$jscoverage['short-memory.js'][384] = 0;
  _$jscoverage['short-memory.js'][386] = 0;
  _$jscoverage['short-memory.js'][387] = 0;
  _$jscoverage['short-memory.js'][390] = 0;
  _$jscoverage['short-memory.js'][391] = 0;
  _$jscoverage['short-memory.js'][392] = 0;
  _$jscoverage['short-memory.js'][394] = 0;
  _$jscoverage['short-memory.js'][397] = 0;
  _$jscoverage['short-memory.js'][398] = 0;
  _$jscoverage['short-memory.js'][401] = 0;
  _$jscoverage['short-memory.js'][402] = 0;
  _$jscoverage['short-memory.js'][403] = 0;
  _$jscoverage['short-memory.js'][406] = 0;
  _$jscoverage['short-memory.js'][407] = 0;
  _$jscoverage['short-memory.js'][408] = 0;
  _$jscoverage['short-memory.js'][409] = 0;
  _$jscoverage['short-memory.js'][410] = 0;
  _$jscoverage['short-memory.js'][411] = 0;
  _$jscoverage['short-memory.js'][412] = 0;
  _$jscoverage['short-memory.js'][413] = 0;
  _$jscoverage['short-memory.js'][415] = 0;
  _$jscoverage['short-memory.js'][416] = 0;
  _$jscoverage['short-memory.js'][418] = 0;
  _$jscoverage['short-memory.js'][419] = 0;
  _$jscoverage['short-memory.js'][421] = 0;
  _$jscoverage['short-memory.js'][422] = 0;
  _$jscoverage['short-memory.js'][423] = 0;
  _$jscoverage['short-memory.js'][424] = 0;
  _$jscoverage['short-memory.js'][425] = 0;
  _$jscoverage['short-memory.js'][426] = 0;
  _$jscoverage['short-memory.js'][427] = 0;
  _$jscoverage['short-memory.js'][428] = 0;
  _$jscoverage['short-memory.js'][429] = 0;
  _$jscoverage['short-memory.js'][430] = 0;
  _$jscoverage['short-memory.js'][431] = 0;
  _$jscoverage['short-memory.js'][432] = 0;
  _$jscoverage['short-memory.js'][433] = 0;
  _$jscoverage['short-memory.js'][435] = 0;
  _$jscoverage['short-memory.js'][436] = 0;
  _$jscoverage['short-memory.js'][437] = 0;
  _$jscoverage['short-memory.js'][438] = 0;
  _$jscoverage['short-memory.js'][441] = 0;
  _$jscoverage['short-memory.js'][445] = 0;
  _$jscoverage['short-memory.js'][446] = 0;
  _$jscoverage['short-memory.js'][448] = 0;
  _$jscoverage['short-memory.js'][451] = 0;
  _$jscoverage['short-memory.js'][455] = 0;
}
_$jscoverage['short-memory.js'][6]++;
(function () {
  _$jscoverage['short-memory.js'][7]++;
  var Memorable, ShortMemory, __hasProp = ({}).hasOwnProperty, __extends = (function (child, parent) {
  _$jscoverage['short-memory.js'][9]++;
  for (var key in parent) {
    _$jscoverage['short-memory.js'][9]++;
    if (__hasProp.call(parent, key)) {
      _$jscoverage['short-memory.js'][9]++;
      child[key] = parent[key];
    }
}
  _$jscoverage['short-memory.js'][9]++;
  function ctor() {
    _$jscoverage['short-memory.js'][9]++;
    this.constructor = child;
}
  _$jscoverage['short-memory.js'][9]++;
  ctor.prototype = parent.prototype;
  _$jscoverage['short-memory.js'][9]++;
  child.prototype = new ctor();
  _$jscoverage['short-memory.js'][9]++;
  child.__super__ = parent.prototype;
  _$jscoverage['short-memory.js'][9]++;
  return child;
});
  _$jscoverage['short-memory.js'][11]++;
  ShortMemory = (function (_super) {
  _$jscoverage['short-memory.js'][12]++;
  var _this;
  _$jscoverage['short-memory.js'][14]++;
  __extends(ShortMemory, _super);
  _$jscoverage['short-memory.js'][16]++;
  ShortMemory.prototype.heap = {};
  _$jscoverage['short-memory.js'][18]++;
  ShortMemory.prototype.maxSize = 0;
  _$jscoverage['short-memory.js'][20]++;
  ShortMemory.prototype.maxCount = 0;
  _$jscoverage['short-memory.js'][22]++;
  ShortMemory.prototype.maxAge = 0;
  _$jscoverage['short-memory.js'][24]++;
  ShortMemory.prototype.pruneTime = 5;
  _$jscoverage['short-memory.js'][26]++;
  ShortMemory.prototype.deathTime = 0;
  _$jscoverage['short-memory.js'][28]++;
  ShortMemory.prototype.debug = false;
  _$jscoverage['short-memory.js'][30]++;
  _this = ShortMemory;
  _$jscoverage['short-memory.js'][32]++;
  function ShortMemory(options) {
    _$jscoverage['short-memory.js'][33]++;
    var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    _$jscoverage['short-memory.js'][34]++;
    _this = this;
    _$jscoverage['short-memory.js'][35]++;
    if (options == null) {
      _$jscoverage['short-memory.js'][36]++;
      options = {};
    }
    _$jscoverage['short-memory.js'][38]++;
    if ((_ref = options.maxSize) == null) {
      _$jscoverage['short-memory.js'][39]++;
      options.maxSize = 0;
    }
    _$jscoverage['short-memory.js'][41]++;
    if ((_ref1 = options.maxCount) == null) {
      _$jscoverage['short-memory.js'][42]++;
      options.maxCount = 0;
    }
    _$jscoverage['short-memory.js'][44]++;
    if ((_ref2 = options.maxAge) == null) {
      _$jscoverage['short-memory.js'][45]++;
      options.maxAge = 0;
    }
    _$jscoverage['short-memory.js'][47]++;
    if ((_ref3 = options.deathTime) == null) {
      _$jscoverage['short-memory.js'][48]++;
      options.deathTime = 0;
    }
    _$jscoverage['short-memory.js'][50]++;
    if ((_ref4 = options.pruneTime) == null) {
      _$jscoverage['short-memory.js'][51]++;
      options.pruneTime = 5;
    }
    _$jscoverage['short-memory.js'][53]++;
    if ((_ref5 = options.debug) == null) {
      _$jscoverage['short-memory.js'][54]++;
      options.debug = false;
    }
    _$jscoverage['short-memory.js'][56]++;
    _this.maxSize = options.maxSize;
    _$jscoverage['short-memory.js'][57]++;
    _this.maxCount = options.maxCount;
    _$jscoverage['short-memory.js'][58]++;
    _this.maxAge = options.maxAge;
    _$jscoverage['short-memory.js'][59]++;
    _this.debug = options.debug;
    _$jscoverage['short-memory.js'][60]++;
    _this.pruneTime = options.pruneTime;
    _$jscoverage['short-memory.js'][61]++;
    _this.deathTime = options.deathTime;
    _$jscoverage['short-memory.js'][62]++;
    if (_this.deathTime > _this.maxAge) {
      _$jscoverage['short-memory.js'][63]++;
      throw "deathTime of cache cannot be greater than maxAge";
    }
    _$jscoverage['short-memory.js'][65]++;
    (function (_this) {
  _$jscoverage['short-memory.js'][66]++;
  return ShortMemory.prototype.prune.call(_this);
})(_this);
}
  _$jscoverage['short-memory.js'][70]++;
  ShortMemory.prototype.set = (function (key, data, options, callback) {
  _$jscoverage['short-memory.js'][71]++;
  if (typeof options === "function") {
    _$jscoverage['short-memory.js'][72]++;
    callback = options;
    _$jscoverage['short-memory.js'][73]++;
    options = {};
  }
  _$jscoverage['short-memory.js'][75]++;
  if (typeof callback === "function") {
    _$jscoverage['short-memory.js'][76]++;
    _this.debug && console.log("Debug: set has a callback; running async");
    _$jscoverage['short-memory.js'][77]++;
    process.nextTick((function () {
  _$jscoverage['short-memory.js'][78]++;
  var value;
  _$jscoverage['short-memory.js'][79]++;
  value = _this.setInternal(key, data, options);
  _$jscoverage['short-memory.js'][80]++;
  return callback(value[0], value[1]);
}));
    _$jscoverage['short-memory.js'][82]++;
    return null;
  }
  else {
    _$jscoverage['short-memory.js'][84]++;
    _this.debug && console.log("Debug: get has no callback; running sync");
    _$jscoverage['short-memory.js'][85]++;
    return _this.setInternal(key, data, options)[1];
  }
});
  _$jscoverage['short-memory.js'][89]++;
  ShortMemory.prototype.setInternal = (function (key, data, options) {
  _$jscoverage['short-memory.js'][90]++;
  var memorable, _ref, _ref1;
  _$jscoverage['short-memory.js'][91]++;
  try {
    _$jscoverage['short-memory.js'][92]++;
    if (options == null) {
      _$jscoverage['short-memory.js'][93]++;
      options = {};
    }
    _$jscoverage['short-memory.js'][95]++;
    if ((_ref = options.maxAge) == null) {
      _$jscoverage['short-memory.js'][96]++;
      options.maxAge = _this.maxAge;
    }
    _$jscoverage['short-memory.js'][98]++;
    if ((_ref1 = options.deathTime) == null) {
      _$jscoverage['short-memory.js'][99]++;
      options.deathTime = _this.deathTime;
    }
    _$jscoverage['short-memory.js'][101]++;
    memorable = new Memorable(key, data, options);
    _$jscoverage['short-memory.js'][102]++;
    _this.heap[key] = memorable;
    _$jscoverage['short-memory.js'][103]++;
    _this.debug && console.log("Debug: set heap[" + key + "] to " + data);
    _$jscoverage['short-memory.js'][104]++;
    return [null, memorable.data];
  }
  catch (ex) {
    _$jscoverage['short-memory.js'][106]++;
    console.error("Unable to set memorable: " + ex);
    _$jscoverage['short-memory.js'][107]++;
    return [{type: "exception", message: ex}, null];
  }
});
  _$jscoverage['short-memory.js'][116]++;
  ShortMemory.prototype.get = (function (key, callback) {
  _$jscoverage['short-memory.js'][117]++;
  _this = this;
  _$jscoverage['short-memory.js'][118]++;
  if (typeof callback === "function") {
    _$jscoverage['short-memory.js'][119]++;
    _this.debug && console.log("Debug: get has a callback; running async");
    _$jscoverage['short-memory.js'][120]++;
    process.nextTick((function () {
  _$jscoverage['short-memory.js'][121]++;
  var value;
  _$jscoverage['short-memory.js'][122]++;
  value = _this.getInternal(key);
  _$jscoverage['short-memory.js'][123]++;
  return callback(value[0], value[1]);
}));
    _$jscoverage['short-memory.js'][125]++;
    return null;
  }
  else {
    _$jscoverage['short-memory.js'][127]++;
    _this.debug && console.log("Debug: get has no callback; running sync");
    _$jscoverage['short-memory.js'][128]++;
    return _this.getInternal(key)[1];
  }
});
  _$jscoverage['short-memory.js'][132]++;
  ShortMemory.prototype.getInternal = (function (key) {
  _$jscoverage['short-memory.js'][133]++;
  var value;
  _$jscoverage['short-memory.js'][134]++;
  _this.debug && console.log("Debug: getting key " + key + " from heap");
  _$jscoverage['short-memory.js'][135]++;
  value = _this.heap[key];
  _$jscoverage['short-memory.js'][136]++;
  if (typeof value === "undefined") {
    _$jscoverage['short-memory.js'][137]++;
    _this.debug && console.log("Debug: not found");
    _$jscoverage['short-memory.js'][138]++;
    return [{type: "notfound", message: "Key " + key + " not found in heap."}, null];
  }
  else {
    _$jscoverage['short-memory.js'][145]++;
    if (! value.isGood) {
      _$jscoverage['short-memory.js'][146]++;
      _this.debug && console.log("Debug: expired or invalid");
      _$jscoverage['short-memory.js'][147]++;
      _this.destroy(key);
      _$jscoverage['short-memory.js'][148]++;
      return [{type: "notvalid", message: "Key " + key + " expired or invalid."}, null];
    }
    else {
      _$jscoverage['short-memory.js'][155]++;
      _this.debug && console.log("Debug: found it!");
      _$jscoverage['short-memory.js'][156]++;
      return [null, value.data];
    }
  }
});
  _$jscoverage['short-memory.js'][161]++;
  ShortMemory.prototype.getOrSet = (function (key, setback, options, callback) {
  _$jscoverage['short-memory.js'][162]++;
  var value;
  _$jscoverage['short-memory.js'][163]++;
  _this = this;
  _$jscoverage['short-memory.js'][164]++;
  if (typeof options === "function") {
    _$jscoverage['short-memory.js'][165]++;
    callback = options;
    _$jscoverage['short-memory.js'][166]++;
    options = {};
  }
  _$jscoverage['short-memory.js'][168]++;
  if (typeof callback === "function") {
    _$jscoverage['short-memory.js'][169]++;
    _this.debug && console.log("Debug: getOrSet; getting async");
    _$jscoverage['short-memory.js'][170]++;
    _this.get(key, (function (err, data) {
  _$jscoverage['short-memory.js'][171]++;
  if (! err) {
    _$jscoverage['short-memory.js'][172]++;
    _this.debug && console.log("Debug: getOrSet; key exists, calling back");
    _$jscoverage['short-memory.js'][173]++;
    callback(null, data);
    _$jscoverage['short-memory.js'][174]++;
    if (_this.heap[key].isNearDeath()) {
      _$jscoverage['short-memory.js'][175]++;
      _this.debug && console.log("Debug: getOrSet; key is near death; will set after get");
      _$jscoverage['short-memory.js'][176]++;
      if (options.async) {
        _$jscoverage['short-memory.js'][177]++;
        return process.nextTick((function () {
  _$jscoverage['short-memory.js'][178]++;
  return setback(key, (function (data) {
  _$jscoverage['short-memory.js'][179]++;
  return _this.set(key, data, options);
}));
}));
      }
      else {
        _$jscoverage['short-memory.js'][183]++;
        return process.nextTick((function () {
  _$jscoverage['short-memory.js'][184]++;
  return _this.set(key, setback(key, options));
}));
      }
    }
  }
  else {
    _$jscoverage['short-memory.js'][189]++;
    _this.debug && console.log("Debug: getOrSet; key invalid, setting back");
    _$jscoverage['short-memory.js'][190]++;
    if (options.async) {
      _$jscoverage['short-memory.js'][191]++;
      _this.debug && console.log("Debug: getOrSet; setback is async");
      _$jscoverage['short-memory.js'][192]++;
      return setback(key, (function (data) {
  _$jscoverage['short-memory.js'][193]++;
  return _this.set(key, data, options, callback);
}));
    }
    else {
      _$jscoverage['short-memory.js'][196]++;
      _this.debug && console.log("Debug: getOrSet; setback is sync");
      _$jscoverage['short-memory.js'][197]++;
      return _this.set(key, setback(key), options, callback);
    }
  }
}));
  }
  else {
    _$jscoverage['short-memory.js'][202]++;
    _this.debug && console.log("Debug: getOrSet; getting sync");
    _$jscoverage['short-memory.js'][203]++;
    value = _this.getInternal(key);
    _$jscoverage['short-memory.js'][204]++;
    if (! value[0]) {
      _$jscoverage['short-memory.js'][205]++;
      if (_this.heap[key].isNearDeath()) {
        _$jscoverage['short-memory.js'][206]++;
        _this.debug && console.log("Debug: getOrSet; key is near death; will set after get");
        _$jscoverage['short-memory.js'][207]++;
        if (options.async) {
          _$jscoverage['short-memory.js'][208]++;
          throw "Cannot call getOrSet async without a callback!";
        }
        _$jscoverage['short-memory.js'][210]++;
        process.nextTick((function () {
  _$jscoverage['short-memory.js'][211]++;
  return _this.set(key, setback(key, options));
}));
      }
      _$jscoverage['short-memory.js'][214]++;
      return value[1];
    }
    else {
      _$jscoverage['short-memory.js'][216]++;
      _this.debug && console.log("Debug: getOrSet; no valid key; setting");
      _$jscoverage['short-memory.js'][217]++;
      if (options.async) {
        _$jscoverage['short-memory.js'][218]++;
        throw "Cannot call getOrSet async without a callback!";
      }
      _$jscoverage['short-memory.js'][220]++;
      return _this.setInternal(key, setback(), options);
    }
  }
  _$jscoverage['short-memory.js'][223]++;
  return _this.get(key, (function (error, value) {
  _$jscoverage['short-memory.js'][224]++;
  var data;
  _$jscoverage['short-memory.js'][225]++;
  if (error) {
    _$jscoverage['short-memory.js'][226]++;
    if (error.type === "notfound" || error.type === "invalid") {
      _$jscoverage['short-memory.js'][227]++;
      data = setback();
      _$jscoverage['short-memory.js'][228]++;
      return _this.set(key, data, options, callback);
    }
    _$jscoverage['short-memory.js'][230]++;
    return callback(error);
  }
  else {
    _$jscoverage['short-memory.js'][232]++;
    return callback(null, value);
  }
}));
});
  _$jscoverage['short-memory.js'][237]++;
  ShortMemory.prototype.destroy = (function (key, callback) {
  _$jscoverage['short-memory.js'][238]++;
  if (typeof callback === "function") {
    _$jscoverage['short-memory.js'][239]++;
    return process.nextTick((function () {
  _$jscoverage['short-memory.js'][240]++;
  if (typeof _this.heap[key] === "undefined") {
    _$jscoverage['short-memory.js'][241]++;
    _this.debug && console.log("Debug: destroy async - key does not exist: " + key);
    _$jscoverage['short-memory.js'][242]++;
    return callback(false);
  }
  else {
    _$jscoverage['short-memory.js'][244]++;
    _this.debug && console.log("Debug: destroy async - destroying key: " + key);
    _$jscoverage['short-memory.js'][245]++;
    _this.heap[key].destroy();
    _$jscoverage['short-memory.js'][246]++;
    return callback(delete _this.heap[key]);
  }
}));
  }
  else {
    _$jscoverage['short-memory.js'][250]++;
    if (typeof _this.heap[key] === "undefined") {
      _$jscoverage['short-memory.js'][251]++;
      _this.debug && console.log("Debug: destroy sync - key does not exist: " + key);
      _$jscoverage['short-memory.js'][252]++;
      return false;
    }
    else {
      _$jscoverage['short-memory.js'][254]++;
      _this.debug && console.log("Debug: destroy sync - destroying key: " + key);
      _$jscoverage['short-memory.js'][255]++;
      _this.heap[key].emit("destroy");
      _$jscoverage['short-memory.js'][256]++;
      return delete _this.heap[key];
    }
  }
});
  _$jscoverage['short-memory.js'][261]++;
  ShortMemory.prototype.prune = (function () {
  _$jscoverage['short-memory.js'][262]++;
  var count, key, memorable, overCount, overSize, prunable, pruned, size, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
  _$jscoverage['short-memory.js'][263]++;
  _this.emit("pre-prune");
  _$jscoverage['short-memory.js'][264]++;
  clearTimeout(_this.timer);
  _$jscoverage['short-memory.js'][265]++;
  prunable = [];
  _$jscoverage['short-memory.js'][266]++;
  pruned = 0;
  _$jscoverage['short-memory.js'][267]++;
  _ref = _this.heap;
  _$jscoverage['short-memory.js'][268]++;
  for (key in _ref) {
    _$jscoverage['short-memory.js'][269]++;
    memorable = _ref[key];
    _$jscoverage['short-memory.js'][270]++;
    if (! memorable.isGood()) {
      _$jscoverage['short-memory.js'][271]++;
      prunable.push(key);
    }
}
  _$jscoverage['short-memory.js'][274]++;
  for (_i = 0, _len = prunable.length; _i < _len; _i++) {
    _$jscoverage['short-memory.js'][275]++;
    key = prunable[_i];
    _$jscoverage['short-memory.js'][276]++;
    pruned++;
    _$jscoverage['short-memory.js'][277]++;
    _this.destroy(key);
}
  _$jscoverage['short-memory.js'][279]++;
  if (_this.maxCount !== 0) {
    _$jscoverage['short-memory.js'][280]++;
    count = Object.keys(_this.heap).length;
    _$jscoverage['short-memory.js'][281]++;
    if (count > _this.maxCount) {
      _$jscoverage['short-memory.js'][282]++;
      overCount = count - _this.maxCount;
      _$jscoverage['short-memory.js'][283]++;
      prunable = Object.keys(_this.heap).slice(0, overCount);
      _$jscoverage['short-memory.js'][284]++;
      for (_j = 0, _len1 = prunable.length; _j < _len1; _j++) {
        _$jscoverage['short-memory.js'][285]++;
        key = prunable[_j];
        _$jscoverage['short-memory.js'][286]++;
        pruned++;
        _$jscoverage['short-memory.js'][287]++;
        _this.destroy(key);
}
    }
  }
  _$jscoverage['short-memory.js'][291]++;
  if (_this.maxSize !== 0) {
    _$jscoverage['short-memory.js'][292]++;
    size = _this.calculateSize();
    _$jscoverage['short-memory.js'][293]++;
    if (size > _this.maxSize) {
      _$jscoverage['short-memory.js'][294]++;
      overSize = size - _this.maxSize;
      _$jscoverage['short-memory.js'][295]++;
      prunable = [];
      _$jscoverage['short-memory.js'][296]++;
      _ref1 = _this.heap;
      _$jscoverage['short-memory.js'][297]++;
      for (key in _ref1) {
        _$jscoverage['short-memory.js'][298]++;
        memorable = _ref1[key];
        _$jscoverage['short-memory.js'][299]++;
        prunable.push(key);
        _$jscoverage['short-memory.js'][300]++;
        overSize -= memorable.size;
        _$jscoverage['short-memory.js'][301]++;
        if (overSize <= 0) {
          _$jscoverage['short-memory.js'][302]++;
          break;
        }
}
      _$jscoverage['short-memory.js'][305]++;
      for (_k = 0, _len2 = prunable.length; _k < _len2; _k++) {
        _$jscoverage['short-memory.js'][306]++;
        key = prunable[_k];
        _$jscoverage['short-memory.js'][307]++;
        pruned++;
        _$jscoverage['short-memory.js'][308]++;
        _this.destroy(key);
}
    }
  }
  _$jscoverage['short-memory.js'][312]++;
  _this.timer = setTimeout((function () {
  _$jscoverage['short-memory.js'][313]++;
  return ShortMemory.prototype.prune.call(_this);
}), _this.pruneTime * 1000);
  _$jscoverage['short-memory.js'][315]++;
  _this.emit("prune");
  _$jscoverage['short-memory.js'][316]++;
  return pruned;
});
  _$jscoverage['short-memory.js'][319]++;
  ShortMemory.prototype.calculateSize = (function () {
  _$jscoverage['short-memory.js'][320]++;
  var i, memorable, size, _ref;
  _$jscoverage['short-memory.js'][321]++;
  size = 0;
  _$jscoverage['short-memory.js'][322]++;
  _ref = _this.heap;
  _$jscoverage['short-memory.js'][323]++;
  for (i in _ref) {
    _$jscoverage['short-memory.js'][324]++;
    memorable = _ref[i];
    _$jscoverage['short-memory.js'][325]++;
    size += memorable.size;
}
  _$jscoverage['short-memory.js'][327]++;
  return size;
});
  _$jscoverage['short-memory.js'][330]++;
  ShortMemory.prototype.isHealthy = (function (key) {
  _$jscoverage['short-memory.js'][331]++;
  var entry;
  _$jscoverage['short-memory.js'][332]++;
  entry = _this.heap[key];
  _$jscoverage['short-memory.js'][333]++;
  if (entry) {
    _$jscoverage['short-memory.js'][334]++;
    return entry.isGood() && ! entry.isNearDeath();
  }
  else {
    _$jscoverage['short-memory.js'][336]++;
    return false;
  }
});
  _$jscoverage['short-memory.js'][340]++;
  return ShortMemory;
})(require("events").EventEmitter);
  _$jscoverage['short-memory.js'][344]++;
  Memorable = (function (_super) {
  _$jscoverage['short-memory.js'][345]++;
  var _this;
  _$jscoverage['short-memory.js'][347]++;
  __extends(Memorable, _super);
  _$jscoverage['short-memory.js'][349]++;
  Memorable.prototype.key = "";
  _$jscoverage['short-memory.js'][351]++;
  Memorable.prototype.data = {};
  _$jscoverage['short-memory.js'][353]++;
  Memorable.prototype.invalid = false;
  _$jscoverage['short-memory.js'][355]++;
  Memorable.prototype.size = 0;
  _$jscoverage['short-memory.js'][357]++;
  Memorable.prototype.expires = 0;
  _$jscoverage['short-memory.js'][359]++;
  Memorable.prototype.deathTime = 0;
  _$jscoverage['short-memory.js'][361]++;
  _this = Memorable;
  _$jscoverage['short-memory.js'][363]++;
  function Memorable(key, data, options) {
    _$jscoverage['short-memory.js'][364]++;
    var _ref, _ref1;
    _$jscoverage['short-memory.js'][365]++;
    _this = this;
    _$jscoverage['short-memory.js'][366]++;
    if (typeof key === "undefined") {
      _$jscoverage['short-memory.js'][367]++;
      throw "Memorable missing key element";
    }
    _$jscoverage['short-memory.js'][369]++;
    if (typeof data === "undefined") {
      _$jscoverage['short-memory.js'][370]++;
      throw "Memorable missing data element";
    }
    _$jscoverage['short-memory.js'][372]++;
    if (options == null) {
      _$jscoverage['short-memory.js'][373]++;
      options = {};
    }
    _$jscoverage['short-memory.js'][375]++;
    if ((_ref = options.maxAge) == null) {
      _$jscoverage['short-memory.js'][376]++;
      options.maxAge = 0;
    }
    _$jscoverage['short-memory.js'][378]++;
    if ((_ref1 = options.deathTime) == null) {
      _$jscoverage['short-memory.js'][379]++;
      options.deathTime = 0;
    }
    _$jscoverage['short-memory.js'][381]++;
    _this.key = key;
    _$jscoverage['short-memory.js'][382]++;
    _this.data = data;
    _$jscoverage['short-memory.js'][383]++;
    if (options.maxAge !== 0) {
      _$jscoverage['short-memory.js'][384]++;
      _this.expires = Date.now() + (options.maxAge * 1000);
    }
    _$jscoverage['short-memory.js'][386]++;
    _this.deathTime = options.deathTime;
    _$jscoverage['short-memory.js'][387]++;
    _this.size = _this.calculateSize();
}
  _$jscoverage['short-memory.js'][390]++;
  Memorable.prototype.isGood = (function () {
  _$jscoverage['short-memory.js'][391]++;
  if (_this.expires !== 0 && Date.now() > _this.expires) {
    _$jscoverage['short-memory.js'][392]++;
    _this.invalidate();
  }
  _$jscoverage['short-memory.js'][394]++;
  return ! _this.invalid;
});
  _$jscoverage['short-memory.js'][397]++;
  Memorable.prototype.isNearDeath = (function () {
  _$jscoverage['short-memory.js'][398]++;
  return Date.now() > (_this.expires - (_this.deathTime * 1000));
});
  _$jscoverage['short-memory.js'][401]++;
  Memorable.prototype.invalidate = (function () {
  _$jscoverage['short-memory.js'][402]++;
  _this.invalid = true;
  _$jscoverage['short-memory.js'][403]++;
  return _this.emit("invalidate");
});
  _$jscoverage['short-memory.js'][406]++;
  Memorable.prototype.calculateSize = (function () {
  _$jscoverage['short-memory.js'][407]++;
  var bytes, check, clearFuncs, func, isChecked, stack, uncheck, value;
  _$jscoverage['short-memory.js'][408]++;
  clearFuncs = [];
  _$jscoverage['short-memory.js'][409]++;
  stack = [_this.data];
  _$jscoverage['short-memory.js'][410]++;
  bytes = 0;
  _$jscoverage['short-memory.js'][411]++;
  func = null;
  _$jscoverage['short-memory.js'][412]++;
  isChecked = (function (item) {
  _$jscoverage['short-memory.js'][413]++;
  return item.__c || false;
});
  _$jscoverage['short-memory.js'][415]++;
  check = (function (item) {
  _$jscoverage['short-memory.js'][416]++;
  return item.__c = true;
});
  _$jscoverage['short-memory.js'][418]++;
  uncheck = (function (item) {
  _$jscoverage['short-memory.js'][419]++;
  return delete item.__c;
});
  _$jscoverage['short-memory.js'][421]++;
  while (stack.length) {
    _$jscoverage['short-memory.js'][422]++;
    value = stack.pop();
    _$jscoverage['short-memory.js'][423]++;
    (function (value) {
  _$jscoverage['short-memory.js'][424]++;
  var i, val;
  _$jscoverage['short-memory.js'][425]++;
  if (typeof value === "string") {
    _$jscoverage['short-memory.js'][426]++;
    return bytes += value.length * 2;
  }
  else {
    _$jscoverage['short-memory.js'][427]++;
    if (typeof value === "boolean") {
      _$jscoverage['short-memory.js'][428]++;
      return bytes += 4;
    }
    else {
      _$jscoverage['short-memory.js'][429]++;
      if (typeof value === "number") {
        _$jscoverage['short-memory.js'][430]++;
        return bytes += 8;
      }
      else {
        _$jscoverage['short-memory.js'][431]++;
        if (typeof value === "object" && ! isChecked(value)) {
          _$jscoverage['short-memory.js'][432]++;
          clearFuncs.push((function () {
  _$jscoverage['short-memory.js'][433]++;
  return uncheck(value);
}));
          _$jscoverage['short-memory.js'][435]++;
          for (i in value) {
            _$jscoverage['short-memory.js'][436]++;
            val = value[i];
            _$jscoverage['short-memory.js'][437]++;
            if (value.hasOwnProperty(i)) {
              _$jscoverage['short-memory.js'][438]++;
              stack.push(val);
            }
}
          _$jscoverage['short-memory.js'][441]++;
          return check(value);
        }
      }
    }
  }
})(value);
}
  _$jscoverage['short-memory.js'][445]++;
  while (func = clearFuncs.pop()) {
    _$jscoverage['short-memory.js'][446]++;
    func.call();
}
  _$jscoverage['short-memory.js'][448]++;
  return bytes;
});
  _$jscoverage['short-memory.js'][451]++;
  return Memorable;
})(require("events").EventEmitter);
  _$jscoverage['short-memory.js'][455]++;
  module.exports = ShortMemory;
}).call(this);
_$jscoverage['short-memory.js'].source = ["/**"," * short-memory; Copyright 2012 Aejay Goehring. "," * Licensed under MIT License. "," * See LICENSE for details. "," */","(function() {","  var Memorable, ShortMemory,","    __hasProp = {}.hasOwnProperty,","    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };","","  ShortMemory = (function(_super) {","    var _this;","","    __extends(ShortMemory, _super);","","    ShortMemory.prototype.heap = {};","","    ShortMemory.prototype.maxSize = 0;","","    ShortMemory.prototype.maxCount = 0;","","    ShortMemory.prototype.maxAge = 0;","","    ShortMemory.prototype.pruneTime = 5;","","    ShortMemory.prototype.deathTime = 0;","","    ShortMemory.prototype.debug = false;","","    _this = ShortMemory;","","    function ShortMemory(options) {","      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;","      _this = this;","      if (options == null) {","        options = {};","      }","      if ((_ref = options.maxSize) == null) {","        options.maxSize = 0;","      }","      if ((_ref1 = options.maxCount) == null) {","        options.maxCount = 0;","      }","      if ((_ref2 = options.maxAge) == null) {","        options.maxAge = 0;","      }","      if ((_ref3 = options.deathTime) == null) {","        options.deathTime = 0;","      }","      if ((_ref4 = options.pruneTime) == null) {","        options.pruneTime = 5;","      }","      if ((_ref5 = options.debug) == null) {","        options.debug = false;","      }","      _this.maxSize = options.maxSize;","      _this.maxCount = options.maxCount;","      _this.maxAge = options.maxAge;","      _this.debug = options.debug;","      _this.pruneTime = options.pruneTime;","      _this.deathTime = options.deathTime;","      if (_this.deathTime &gt; _this.maxAge) {","        throw \"deathTime of cache cannot be greater than maxAge\";","      }","      (function(_this) {","        return ShortMemory.prototype.prune.call(_this);","      })(_this);","    }","","    ShortMemory.prototype.set = function(key, data, options, callback) {","      if (typeof options === 'function') {","        callback = options;","        options = {};","      }","      if (typeof callback === 'function') {","        _this.debug &amp;&amp; console.log(\"Debug: set has a callback; running async\");","        process.nextTick(function() {","          var value;","          value = _this.setInternal(key, data, options);","          return callback(value[0], value[1]);","        });","        return null;","      } else {","        _this.debug &amp;&amp; console.log(\"Debug: get has no callback; running sync\");","        return (_this.setInternal(key, data, options))[1];","      }","    };","","    ShortMemory.prototype.setInternal = function(key, data, options) {","      var memorable, _ref, _ref1;","      try {","        if (options == null) {","          options = {};","        }","        if ((_ref = options.maxAge) == null) {","          options.maxAge = _this.maxAge;","        }","        if ((_ref1 = options.deathTime) == null) {","          options.deathTime = _this.deathTime;","        }","        memorable = new Memorable(key, data, options);","        _this.heap[key] = memorable;","        _this.debug &amp;&amp; console.log(\"Debug: set heap[\" + key + \"] to \" + data);","        return [null, memorable.data];","      } catch (ex) {","        console.error(\"Unable to set memorable: \" + ex);","        return [","          {","            type: \"exception\",","            message: ex","          }, null","        ];","      }","    };","","    ShortMemory.prototype.get = function(key, callback) {","      _this = this;","      if (typeof callback === 'function') {","        _this.debug &amp;&amp; console.log(\"Debug: get has a callback; running async\");","        process.nextTick(function() {","          var value;","          value = _this.getInternal(key);","          return callback(value[0], value[1]);","        });","        return null;","      } else {","        _this.debug &amp;&amp; console.log(\"Debug: get has no callback; running sync\");","        return (_this.getInternal(key))[1];","      }","    };","","    ShortMemory.prototype.getInternal = function(key) {","      var value;","      _this.debug &amp;&amp; console.log(\"Debug: getting key \" + key + \" from heap\");","      value = _this.heap[key];","      if (typeof value === 'undefined') {","        _this.debug &amp;&amp; console.log(\"Debug: not found\");","        return [","          {","            type: \"notfound\",","            message: \"Key \" + key + \" not found in heap.\"","          }, null","        ];","      } else {","        if (!value.isGood) {","          _this.debug &amp;&amp; console.log(\"Debug: expired or invalid\");","          _this.destroy(key);","          return [","            {","              type: \"notvalid\",","              message: \"Key \" + key + \" expired or invalid.\"","            }, null","          ];","        } else {","          _this.debug &amp;&amp; console.log(\"Debug: found it!\");","          return [null, value.data];","        }","      }","    };","","    ShortMemory.prototype.getOrSet = function(key, setback, options, callback) {","      var value;","      _this = this;","      if (typeof options === 'function') {","        callback = options;","        options = {};","      }","      if (typeof callback === 'function') {","        _this.debug &amp;&amp; console.log(\"Debug: getOrSet; getting async\");","        _this.get(key, function(err, data) {","          if (!err) {","            _this.debug &amp;&amp; console.log(\"Debug: getOrSet; key exists, calling back\");","            callback(null, data);","            if (_this.heap[key].isNearDeath()) {","              _this.debug &amp;&amp; console.log(\"Debug: getOrSet; key is near death; will set after get\");","              if (options.async) {","                return process.nextTick(function() {","                  return setback(key, function(data) {","                    return _this.set(key, data, options);","                  });","                });","              } else {","                return process.nextTick(function() {","                  return _this.set(key, setback(key, options));","                });","              }","            }","          } else {","            _this.debug &amp;&amp; console.log(\"Debug: getOrSet; key invalid, setting back\");","            if (options.async) {","              _this.debug &amp;&amp; console.log(\"Debug: getOrSet; setback is async\");","              return setback(key, function(data) {","                return _this.set(key, data, options, callback);","              });","            } else {","              _this.debug &amp;&amp; console.log(\"Debug: getOrSet; setback is sync\");","              return _this.set(key, setback(key), options, callback);","            }","          }","        });","      } else {","        _this.debug &amp;&amp; console.log(\"Debug: getOrSet; getting sync\");","        value = _this.getInternal(key);","        if (!value[0]) {","          if (_this.heap[key].isNearDeath()) {","            _this.debug &amp;&amp; console.log(\"Debug: getOrSet; key is near death; will set after get\");","            if (options.async) {","              throw \"Cannot call getOrSet async without a callback!\";","            }","            process.nextTick(function() {","              return _this.set(key, setback(key, options));","            });","          }","          return value[1];","        } else {","          _this.debug &amp;&amp; console.log(\"Debug: getOrSet; no valid key; setting\");","          if (options.async) {","            throw \"Cannot call getOrSet async without a callback!\";","          }","          return _this.setInternal(key, setback(), options);","        }","      }","      return _this.get(key, function(error, value) {","        var data;","        if (error) {","          if (error.type === \"notfound\" || error.type === \"invalid\") {","            data = setback();","            return _this.set(key, data, options, callback);","          }","          return callback(error);","        } else {","          return callback(null, value);","        }","      });","    };","","    ShortMemory.prototype.destroy = function(key, callback) {","      if (typeof callback === 'function') {","        return process.nextTick(function() {","          if (typeof _this.heap[key] === 'undefined') {","            _this.debug &amp;&amp; console.log(\"Debug: destroy async - key does not exist: \" + key);","            return callback(false);","          } else {","            _this.debug &amp;&amp; console.log(\"Debug: destroy async - destroying key: \" + key);","            _this.heap[key].destroy();","            return callback(delete _this.heap[key]);","          }","        });","      } else {","        if (typeof _this.heap[key] === 'undefined') {","          _this.debug &amp;&amp; console.log(\"Debug: destroy sync - key does not exist: \" + key);","          return false;","        } else {","          _this.debug &amp;&amp; console.log(\"Debug: destroy sync - destroying key: \" + key);","          _this.heap[key].emit(\"destroy\");","          return delete _this.heap[key];","        }","      }","    };","","    ShortMemory.prototype.prune = function() {","      var count, key, memorable, overCount, overSize, prunable, pruned, size, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;","      _this.emit(\"pre-prune\");","      clearTimeout(_this.timer);","      prunable = [];","      pruned = 0;","      _ref = _this.heap;","      for (key in _ref) {","        memorable = _ref[key];","        if (!memorable.isGood()) {","          prunable.push(key);","        }","      }","      for (_i = 0, _len = prunable.length; _i &lt; _len; _i++) {","        key = prunable[_i];","        pruned++;","        _this.destroy(key);","      }","      if (_this.maxCount !== 0) {","        count = Object.keys(_this.heap).length;","        if (count &gt; _this.maxCount) {","          overCount = count - _this.maxCount;","          prunable = Object.keys(_this.heap).slice(0, overCount);","          for (_j = 0, _len1 = prunable.length; _j &lt; _len1; _j++) {","            key = prunable[_j];","            pruned++;","            _this.destroy(key);","          }","        }","      }","      if (_this.maxSize !== 0) {","        size = _this.calculateSize();","        if (size &gt; _this.maxSize) {","          overSize = size - _this.maxSize;","          prunable = [];","          _ref1 = _this.heap;","          for (key in _ref1) {","            memorable = _ref1[key];","            prunable.push(key);","            overSize -= memorable.size;","            if (overSize &lt;= 0) {","              break;","            }","          }","          for (_k = 0, _len2 = prunable.length; _k &lt; _len2; _k++) {","            key = prunable[_k];","            pruned++;","            _this.destroy(key);","          }","        }","      }","      _this.timer = setTimeout(function() {","        return ShortMemory.prototype.prune.call(_this);","      }, _this.pruneTime * 1000);","      _this.emit(\"prune\");","      return pruned;","    };","","    ShortMemory.prototype.calculateSize = function() {","      var i, memorable, size, _ref;","      size = 0;","      _ref = _this.heap;","      for (i in _ref) {","        memorable = _ref[i];","        size += memorable.size;","      }","      return size;","    };","","    ShortMemory.prototype.isHealthy = function(key) {","      var entry;","      entry = _this.heap[key];","      if (entry) {","        return entry.isGood() &amp;&amp; !entry.isNearDeath();","      } else {","        return false;","      }","    };","","    return ShortMemory;","","  })(require('events').EventEmitter);","","  Memorable = (function(_super) {","    var _this;","","    __extends(Memorable, _super);","","    Memorable.prototype.key = \"\";","","    Memorable.prototype.data = {};","","    Memorable.prototype.invalid = false;","","    Memorable.prototype.size = 0;","","    Memorable.prototype.expires = 0;","","    Memorable.prototype.deathTime = 0;","","    _this = Memorable;","","    function Memorable(key, data, options) {","      var _ref, _ref1;","      _this = this;","      if (typeof key === 'undefined') {","        throw \"Memorable missing key element\";","      }","      if (typeof data === 'undefined') {","        throw \"Memorable missing data element\";","      }","      if (options == null) {","        options = {};","      }","      if ((_ref = options.maxAge) == null) {","        options.maxAge = 0;","      }","      if ((_ref1 = options.deathTime) == null) {","        options.deathTime = 0;","      }","      _this.key = key;","      _this.data = data;","      if (options.maxAge !== 0) {","        _this.expires = Date.now() + (options.maxAge * 1000);","      }","      _this.deathTime = options.deathTime;","      _this.size = _this.calculateSize();","    }","","    Memorable.prototype.isGood = function() {","      if (_this.expires !== 0 &amp;&amp; Date.now() &gt; _this.expires) {","        _this.invalidate();","      }","      return !_this.invalid;","    };","","    Memorable.prototype.isNearDeath = function() {","      return Date.now() &gt; (_this.expires - (_this.deathTime * 1000));","    };","","    Memorable.prototype.invalidate = function() {","      _this.invalid = true;","      return _this.emit(\"invalidate\");","    };","","    Memorable.prototype.calculateSize = function() {","      var bytes, check, clearFuncs, func, isChecked, stack, uncheck, value;","      clearFuncs = [];","      stack = [_this.data];","      bytes = 0;","      func = null;","      isChecked = function(item) {","        return item[\"__c\"] || false;","      };","      check = function(item) {","        return item[\"__c\"] = true;","      };","      uncheck = function(item) {","        return delete item[\"__c\"];","      };","      while (stack.length) {","        value = stack.pop();","        (function(value) {","          var i, val;","          if (typeof value === 'string') {","            return bytes += value.length * 2;","          } else if (typeof value === 'boolean') {","            return bytes += 4;","          } else if (typeof value === 'number') {","            return bytes += 8;","          } else if (typeof value === 'object' &amp;&amp; !isChecked(value)) {","            clearFuncs.push(function() {","              return uncheck(value);","            });","            for (i in value) {","              val = value[i];","              if (value.hasOwnProperty(i)) {","                stack.push(val);","              }","            }","            return check(value);","          }","        })(value);","      }","      while (func = clearFuncs.pop()) {","        func.call();","      }","      return bytes;","    };","","    return Memorable;","","  })(require('events').EventEmitter);","","  module.exports = ShortMemory;","","}).call(this);"];
